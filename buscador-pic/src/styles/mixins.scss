
// --------------------------------------------------
// Flexbox SASS mixins
// The spec: http://www.w3.org/TR/css3-flexbox
// --------------------------------------------------

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}

// The 'flex' shorthand
// - applies to: flex items
// <positive-number>, initial, auto, or none
@mixin flex($values) {
  -webkit-box-flex: $values;
     -moz-box-flex: $values;
      -webkit-flex: $values;
  	  -ms-flex: $values;
  	      flex: $values;
}

// Flex Flow Direction
// - applies to: flex containers
// row | row-reverse | column | column-reverse
@mixin flex-direction($direction) {
  -webkit-flex-direction: $direction;
     -moz-flex-direction: $direction;
      -ms-flex-direction: $direction;
          flex-direction: $direction;
}

// Flex Line Wrapping
// - applies to: flex containers
// nowrap | wrap | wrap-reverse
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

// Flex Direction and Wrap
// - applies to: flex containers
// <flex-direction> || <flex-wrap>
@mixin flex-flow($flow) {
  -webkit-flex-flow: $flow;
     -moz-flex-flow: $flow;
      -ms-flex-flow: $flow;
          flex-flow: $flow;
}

// Display Order
// - applies to: flex items
// <integer>
@mixin order($val) {
  -webkit-box-ordinal-group: $val;  
     -moz-box-ordinal-group: $val;     
  	     -ms-flex-order: $val;     
  	      -webkit-order: $val;  
  		      order: $val;
}

// Flex grow factor
// - applies to: flex items
// <number>
@mixin flex-grow($grow) {
  -webkit-flex-grow: $grow;
     -moz-flex-grow: $grow;
      -ms-flex-grow: $grow;
          flex-grow: $grow;
}

// Flex shrink
// - applies to: flex item shrink factor
// <number> 
@mixin flex-shrink($shrink) {
  -webkit-flex-shrink: $shrink;
     -moz-flex-shrink: $shrink;
      -ms-flex-shrink: $shrink;
          flex-shrink: $shrink;
}

// Flex basis
// - the initial main size of the flex item
// - applies to: flex itemsnitial main size of the flex item
// <width> 
@mixin flex-basis($width) {
  -webkit-flex-basis: $width;
     -moz-flex-basis: $width;
      -ms-flex-basis: $width;
          flex-basis: $width;
}

// Axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | space-between | space-around 
@mixin justify-content($justify) {
  -webkit-justify-content: $justify;
     -moz-justify-content: $justify;
      -ms-justify-content: $justify;
          justify-content: $justify;
            -ms-flex-pack: $justify;
}

// Packing Flex Lines
// - applies to: multi-line flex containers
// flex-start | flex-end | center | space-between | space-around | stretch 
@mixin align-content($align) {
  -webkit-align-content: $align;
     -moz-align-content: $align;
      -ms-align-content: $align;
          align-content: $align;
}

// Cross-axis Alignment
// - applies to: flex containers
// flex-start | flex-end | center | baseline | stretch 
@mixin align-items($align) {
  -webkit-align-items: $align;
     -moz-align-items: $align;
      -ms-align-items: $align;
       -ms-flex-align: $align;
          align-items: $align;
}

// Cross-axis Alignment
// - applies to: flex items
// auto | flex-start | flex-end | center | baseline | stretch 
@mixin align-self($align) {
  -webkit-align-self: $align;
     -moz-align-self: $align;
      -ms-align-self: $align;
          align-self: $align;
}

@mixin border-radius ($radius: 4px) {
	border-radius			: $radius;
	-moz-border-radius		: $radius;
	-webkit-border-radius	: $radius;
}
@mixin border-radius-all ($topleft: 4px, $topright: 4px, $bottomright: 4px, $bottomleft: 4px) {
	border-radius			: $topleft $topright $bottomright $bottomleft;
	-moz-border-radius		: $topleft $topright $bottomright $bottomleft;
	-ms-border-radius		: $topleft $topright $bottomright $bottomleft;
	-o-border-radius		: $topleft $topright $bottomright $bottomleft;
	-webkit-border-radius	: $topleft $topright $bottomright $bottomleft;
}

@mixin opacity ($opacity: 0.5) {
	$ieOpacity			: $opacity * 100;
	opacity				: $opacity;
	-moz-opacity		: $opacity;
	-webkit-opacity		: $opacity;
	-ms-filter			: progid:DXImageTransform.Microsoft.Alpha(opacity=#{$ieOpacity}); /* IE 8 */
	filter				: alpha(opacity = #{$ieOpacity}); /* IE 5-7 */
}

@mixin background-alpha($color, $alpha) {
	$acolor			: hsla(hue($color), saturation($color), lightness($color), $alpha);
	$iecolor 		: argb($acolor);

	background-color	: $color; /* fallback color */
	background-color	: $acolor;

	/* IE */
	background-color	: transparent\9;
	filter				: progid:DXImageTransform.Microsoft.gradient(startColorstr= #{$iecolor}, endColorstr= #{$iecolor});
	zoom:1; 
}

@mixin box-shadow ($x-size:10px, $y-size:10px, $blur:5px, $color: $black, $spread:0) {
	box-shadow			: $x-size $y-size $blur $spread $color;
	-moz-box-shadow		: $x-size $y-size $blur $spread $color;
	-webkit-box-shadow	: $x-size $y-size $blur $spread $color;
}
@mixin box-shadow-inset ($x-size: 10px, $y-size: 10px, $blur: 5px, $color: $black, $spread:0) {
	box-shadow			: inset $x-size $y-size $blur $spread $color;
	-moz-box-shadow		: inset $x-size $y-size $blur $spread $color;
	-webkit-box-shadow	: inset $x-size $y-size $blur $spread $color;
}

@mixin gradient-vertical ($firstColor: #FFF, $secondColor: #DDD) {
	background	: $firstColor; /* Fallback solid color for old browsers */
	background	: linear-gradient(to bottom, $firstColor 0%, $secondColor 100%); /* W3C */
	background	: -moz-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* FF 3.6+ */
	background	: -ms-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* IE 10+ */
	background	: -o-linear-gradient(top, $firstColor 0%, $secondColor 100%); /* Opera 11.10+ */
	background	: -webkit-linear-gradient(top, $firstColor 0%,$secondColor 100%); /* Chrome 10+, Safari 5.1+ */
	background	: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$firstColor), color-stop(100%,$secondColor)); /* Chrome, Safari 4+ */
	filter		: progid:DXImageTransform.Microsoft.gradient(startColorstr= '#{$firstColor}', endColorstr= '#{$secondColor}', GradientType=0); /* IE 6-9 */
}

@mixin gradient-horizontal ($firstColor: #FFF, $secondColor: #DDD) {
	background	: $firstColor; /* Fallback solid color for old browsers */
	background	: linear-gradient(to right, $firstColor 0%, $secondColor 100%); /* W3C */
	background	: -moz-linear-gradient(left,  $firstColor 0%, $secondColor 100%); /* FF 3.6+ */
	background	: -ms-linear-gradient(left, $firstColor 0%, $secondColor 100%); /* IE 10+ */
	background	: -o-linear-gradient(left, $firstColor 0%, $secondColor 100%); /* Opera 11.10+ */
	background	: -webkit-linear-gradient(left,  $firstColor 0%,$secondColor 100%); /* Chrome 10+, Safari 5.1+ */
	background	: -webkit-gradient(linear, left top, right top, color-stop(0%,$firstColor), color-stop(100%,$secondColor)); /* Chrome, Safari 4+ */
	filter		: progid:DXImageTransform.Microsoft.gradient(startColorstr= '#{$firstColor}', endColorstr= '#{$secondColor}', GradientType=1); /* IE 6-9 */
}

@mixin transition ($type:all, $time:0.2s, $ease:ease) {
    transition			: $type $time $ease;
    -moz-transition		: $type $time $ease;
    -webkit-transition	: $type $time $ease;
    -o-transition		: $type $time $ease;
}

@mixin animation ($name, $duration: 300ms, $delay: 0, $ease: ease) {
	-moz-animation		: $name, $duration, $delay, $ease;
	-ms-animation		: $name, $duration, $delay, $ease;
	-webkit-animation	: $name, $duration, $delay, $ease;
}

@mixin transform ($deg) {
	transform			: $deg;
	-moz-transform		: $deg;
	-ms-transform		: $deg;
	-o-transform		: $deg;
	-webkit-transform	: $deg;
}

@mixin scale ($multiplier) {
	transform			: scale($multiplier);
	-moz-transform		: scale($multiplier);
	-ms-transform		: scale($multiplier);
	-o-transform		: scale($multiplier);
	-webkit-transform	: scale($multiplier);
}

// translate
@mixin translate ($x, $y) {
  @include transform(translate($x, $y));
}

@mixin rotate ($deg) {
	-moz-transform		: rotate($deg);
	-ms-transform		: rotate($deg);
	-o-transform		: rotate($deg);
	-webkit-transform	: rotate($deg);
}

@mixin skew ($deg, $deg2) {
	transform			: skew($deg, $deg2);
	-moz-transform		: skew($deg, $deg2);
	-ms-transform		: skew($deg, $deg2);
	-o-transform		: skew($deg, $deg2);
	-webkit-transform	: skew($deg, $deg2);
}

@mixin font($fontName) {
	@font-face	{
	    font-family: "#{$fontName}";
		src: url("fonts/#{$fontName}/#{$fontName}.eot");
		src: url("fonts/#{$fontName}/#{$fontName}.eot?#iefix") format("embedded-opentype"),
		     url("fonts/#{$fontName}/#{$fontName}.woff") format("woff"),
		     url("fonts/#{$fontName}/#{$fontName}.ttf") format("truetype"),
		     url("fonts/#{$fontName}/#{$fontName}.svg#svgFontName") format("svg");
	}
}

@mixin x-box-sizing ($type: border-box) {
	-webkit-box-sizing: $type; // Safari <= 5.0, Chrome <= 9.0, iOS Safari 3.2 - 4.3 and Android 2.1 - 3.0
	   -moz-box-sizing: $type; // FF 2.0 - 28.0
	        box-sizing: $type; // IE 8, Opera 9.5+
}